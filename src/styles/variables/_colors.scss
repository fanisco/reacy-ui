@function hexToRGBString($hexColor) {
  @return "#{red($hexColor)}, #{green($hexColor)}, #{blue($hexColor)}";
}

// Colors
$def_palette: (
  d500: #050608,
  d400: #28293D,
  d300: #555770,
  d200: #8E90A6,
  d100: #C7C8D9,
  l500: #E3E4EB,
  l400: #EBEBF0,
  l300: #F2F2F5,
  l200: #FAFAFC,
  l100: #FFFFFF
);
$pri_palette: (
  a900: #1D2840,
  a800: #203573,
  a700: #2241A7,
  a600: #254EDA,
  a500: #3366FF,
  a400: #6690FF,
  a300: #8DACFD,
  a200: #B4C9FB,
  a100: #DBE5F9
);
$sec_palette: (
  a900: #40281D,
  a800: #5F2E17,
  a700: #7D3411,
  a600: #9C3B0C,
  a500: #D94700,
  a400: #F26222,
  a300: #FD8555,
  a200: #F9B098,
  a100: #F5dADC
);
$suc_palette: (
  a900: #065F43,
  a800: #0B7247,
  a700: #118D4E,
  a600: #1AAA52,
  a500: #23C653,
  a400: #54DC6E,
  a300: #78ED84,
  a200: #A7F9A7,
  a100: #D6FDD1
);
$war_palette: (
  a900: #7A6A0B,
  a800: #938111,
  a700: #B6A41C,
  a600: #DBC72A,
  a500: #FFEC3A,
  a400: #FFF16C,
  a300: #FFF589,
  a200: #FFF9AF,
  a100: #FFFCD7
);
$dan_palette: (
  a900: #7A0B2B,
  a800: #93132C,
  a700: #B81D2F,
  a600: #DB2A30,
  a500: #FF4539,
  a400: #FF7F6A,
  a300: #FFA288,
  a200: #FFC9B1,
  a100: #FFE6D7
);
$colors_default: (
  foreground: map_get($def_palette, d300),
  foregroundHover: map_get($def_palette, d400),
  foregroundActive: map_get($def_palette, d500),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($def_palette, l100),
  backgroundHover: map_get($def_palette, l200),
  backgroundActive: map_get($def_palette, l200),
  backgroundDisabled: map_get($def_palette, l400),
  border: map_get($def_palette, l500),
  borderHover: map_get($def_palette, l500),
  borderActive: map_get($def_palette, l500),
  borderDisabled: map_get($def_palette, l400),
  link: map_get($def_palette, d300),
  linkHover: map_get($def_palette, d400),
  linkActive: map_get($def_palette, d500),
  linkDisabled: map_get($def_palette, l100)
) !default;
$colors_primary: (
  foreground: map_get($def_palette, l100),
  foregroundHover: map_get($def_palette, l100),
  foregroundActive: map_get($def_palette, l100),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($pri_palette, a500),
  backgroundHover: map_get($pri_palette, a400),
  backgroundActive: map_get($pri_palette, a600),
  backgroundDisabled: map_get($def_palette, l500),
  border: map_get($pri_palette, a400),
  borderHover: map_get($pri_palette, a500),
  borderActive: map_get($pri_palette, a500),
  borderDisabled: map_get($def_palette, l500),
  link: map_get($pri_palette, a400),
  linkHover: map_get($pri_palette, a500),
  linkActive: map_get($pri_palette, a500),
  linkDisabled: map_get($def_palette, l500)
);
$colors_secondary: (
  foreground: map_get($def_palette, l100),
  foregroundHover: map_get($def_palette, l100),
  foregroundActive: map_get($def_palette, l100),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($sec_palette, a500),
  backgroundHover: map_get($sec_palette, a400),
  backgroundActive: map_get($sec_palette, a600),
  backgroundDisabled: map_get($def_palette, l500),
  border: map_get($sec_palette, a400),
  borderHover: map_get($sec_palette, a500),
  borderActive: map_get($sec_palette, a500),
  borderDisabled: map_get($def_palette, l500),
  link: map_get($sec_palette, a400),
  linkHover: map_get($sec_palette, a500),
  linkActive: map_get($sec_palette, a500),
  linkDisabled: map_get($def_palette, l500)
);
$colors_success: (
  foreground: map_get($def_palette, l100),
  foregroundHover: map_get($def_palette, l100),
  foregroundActive: map_get($def_palette, l100),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($suc_palette, a500),
  backgroundHover: map_get($suc_palette, a400),
  backgroundActive: map_get($suc_palette, a600),
  backgroundDisabled: map_get($def_palette, l500),
  border: map_get($suc_palette, a400),
  borderHover: map_get($suc_palette, a500),
  borderActive: map_get($suc_palette, a500),
  borderDisabled: map_get($def_palette, l500),
  link: map_get($suc_palette, a400),
  linkHover: map_get($suc_palette, a500),
  linkActive: map_get($suc_palette, a500),
  linkDisabled: map_get($def_palette, l500)
);
$colors_warning: (
  foreground: map_get($def_palette, l100),
  foregroundHover: map_get($def_palette, l100),
  foregroundActive: map_get($def_palette, l100),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($war_palette, a500),
  backgroundHover: map_get($war_palette, a400),
  backgroundActive: map_get($war_palette, a600),
  backgroundDisabled: map_get($def_palette, l500),
  border: map_get($war_palette, a400),
  borderHover: map_get($war_palette, a500),
  borderActive: map_get($war_palette, a500),
  borderDisabled: map_get($def_palette, l500),
  link: map_get($war_palette, a400),
  linkHover: map_get($war_palette, a500),
  linkActive: map_get($war_palette, a500),
  linkDisabled: map_get($def_palette, l500)
);
$colors_danger: (
  foreground: map_get($def_palette, l100),
  foregroundHover: map_get($def_palette, l100),
  foregroundActive: map_get($def_palette, l100),
  foregroundDisabled: map_get($def_palette, l100),
  background: map_get($dan_palette, a500),
  backgroundHover: map_get($dan_palette, a400),
  backgroundActive: map_get($dan_palette, a600),
  backgroundDisabled: map_get($def_palette, l500),
  border: map_get($dan_palette, a400),
  borderHover: map_get($dan_palette, a500),
  borderActive: map_get($dan_palette, a500),
  borderDisabled: map_get($def_palette, l500),
  link: map_get($dan_palette, a400),
  linkHover: map_get($dan_palette, a500),
  linkActive: map_get($dan_palette, a500),
  linkDisabled: map_get($def_palette, l500)
);
$colors: (
  primary: $colors_primary,
  secondary: $colors_secondary,
  success: $colors_success,
  warning: $colors_warning,
  danger: $colors_danger
);


// Css vars
:root {
  // Sets
  @each $prop, $color in $colors_default {
    --rcy-color-default-#{$prop}: #{hexToRGBString($color)};
  }
  @each $style, $set in $colors {
    @each $prop, $color in $set {
      --rcy-color-#{$style}-#{$prop}: #{hexToRGBString($color)};
    }
  }

  // Buttons
  --rcy-button-default-foreground: var(--rcy-color-default-foreground);
  --rcy-button-default-foregroundHover: var(--rcy-color-default-foregroundHover);
  --rcy-button-default-foregroundActive: var(--rcy-color-default-foregroundActive);
  --rcy-button-default-background: var(--rcy-color-default-background);
  --rcy-button-default-backgroundHover: var(--rcy-color-default-backgroundHover);
  --rcy-button-default-backgroundActive: var(--rcy-color-default-backgroundActive);
  --rcy-button-default-border: var(--rcy-color-default-border);
  --rcy-button-default-borderHover: var(--rcy-color-default-borderHover);
  --rcy-button-default-borderActive: var(--rcy-color-default-borderActive);
  --rcy-button-default-link: var(--rcy-color-default-link);
  --rcy-button-default-linkHover: var(--rcy-color-default-linkHover);
  --rcy-button-default-linkActive: var(--rcy-color-default-linkActive);
  // Buttons colorized
  @each $style, $set in $colors {
    --rcy-button-#{$style}-foreground: var(--rcy-color-#{$style}-foreground);
    --rcy-button-#{$style}-foregroundHover: var(--rcy-color-#{$style}-foregroundHover);
    --rcy-button-#{$style}-foregroundActive: var(--rcy-color-#{$style}-foregroundActive);
    --rcy-button-#{$style}-background: var(--rcy-color-#{$style}-background);
    --rcy-button-#{$style}-backgroundHover: var(--rcy-color-#{$style}-backgroundHover);
    --rcy-button-#{$style}-backgroundActive: var(--rcy-color-#{$style}-backgroundActive);
    --rcy-button-#{$style}-border: var(--rcy-color-#{$style}-background);
    --rcy-button-#{$style}-borderHover: var(--rcy-color-#{$style}-backgroundHover);
    --rcy-button-#{$style}-borderActive: var(--rcy-color-#{$style}-backgroundActive);
    --rcy-button-#{$style}-link: var(--rcy-color-#{$style}-link);
    --rcy-button-#{$style}-linkHover: var(--rcy-color-#{$style}-linkHover);
    --rcy-button-#{$style}-linkActive: var(--rcy-color-#{$style}-linkActive);
  }
  // Buttons disabled
  --rcy-button-foregroundDisabled: var(--rcy-color-default-foregroundDisabled);
  --rcy-button-backgroundDisabled: var(--rcy-color-default-backgroundDisabled);
  --rcy-button-borderDisabled: var(--rcy-color-default-borderDisabled);
  --rcy-button-linkDisabled: var(--rcy-color-default-linkDisabled);

  // Inputs common
  --rcy-input-foreground: #{map_get($colors_default, foreground)};
  --rcy-input-foregroundHover: #{map_get($colors_default, foregroundHover)};
  --rcy-input-foregroundActive: #{map_get($colors_default, foregroundActive)};
  --rcy-input-background: #{map_get($colors_default, background)};
  --rcy-input-backgroundHover: #{map_get($colors_default, backgroundHover)};
  --rcy-input-backgroundActive: #{map_get($colors_default, backgroundActive)};
  // Inputs default
  --rcy-input-default-border: #{map_get($colors_default, border)};
  --rcy-input-default-borderHover: #{map_get($colors_default, borderHover)};
  --rcy-input-default-borderActive: #{map_get($colors_default, borderActive)};
  // Inputs colorized
  @each $style, $set in $colors {
    --rcy-input-#{$style}-border: #{map_get($set, border)};
    --rcy-input-#{$style}-borderHover: #{map_get($set, borderHover)};
    --rcy-input-#{$style}-borderActive: #{map_get($set, borderActive)};
  }
  // Inputs disabled
  --rcy-input-foregroundDisabled: #{map_get($colors_default, foregroundDisabled)};
  --rcy-input-backgroundDisabled: #{map_get($colors_default, backgroundDisabled)};
  --rcy-input-borderDisabled: #{map_get($colors_primary, borderDisabled)};
}
